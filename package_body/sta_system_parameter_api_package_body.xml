<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog 
	xmlns="http://www.liquibase.org/xml/ns/dbchangelog" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:n0="http://www.oracle.com/xml/ns/dbchangelog-ext" 
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog 
	http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">
	<changeSet id="d9b05a2d957c62db3e707c04595bab0d9c608ff3" author="(STA)-Generated" failOnError="false"   runOnChange="false" runAlways="false"  >
		<n0:createOraclePackageBody objectName="STA_SYSTEM_PARAMETER_API" objectType="PACKAGE_BODY" ownerName="STA"  replaceIfExists="false" >
			<n0:source><![CDATA[CREATE OR REPLACE EDITIONABLE PACKAGE BODY "%USER_NAME%"."STA_SYSTEM_PARAMETER_API" IS
  /*
  This is the API for the table "STA_SYSTEM_PARAMETER" with column ID generated BY DEFAULT ON NULL as identity.
  - generator: OM_TAPIGEN
  - generator_version: 0.6.3
  - generator_action: COMPILE_API
  - generated_at: 2024-05-01 03:06:25
  - generated_by: PNL14U85
  */

  g_bulk_limit     PLS_INTEGER := 1000;
  g_bulk_completed BOOLEAN     := FALSE;

  FUNCTION bulk_is_complete
  RETURN BOOLEAN
  IS
  BEGIN
    RETURN g_bulk_completed;
  END bulk_is_complete;

  PROCEDURE set_bulk_limit (
    p_bulk_limit IN PLS_INTEGER )
  IS
  BEGIN
    g_bulk_limit := p_bulk_limit;
  END set_bulk_limit;

  FUNCTION get_bulk_limit
  RETURN PLS_INTEGER
  IS
  BEGIN
    RETURN g_bulk_limit;
  END get_bulk_limit;

  FUNCTION row_exists (
    p_id IN "STA_SYSTEM_PARAMETER"."ID"%TYPE /*PK*/ )
  RETURN BOOLEAN
  IS
    v_return BOOLEAN := FALSE;
    v_dummy  PLS_INTEGER;
    CURSOR   cur_bool IS
      SELECT 1 FROM "STA_SYSTEM_PARAMETER"
      WHERE
        "ID" = p_id;
  BEGIN
    OPEN cur_bool;
    FETCH cur_bool INTO v_dummy;
    IF cur_bool%FOUND THEN
      v_return := TRUE;
    END IF;
    CLOSE cur_bool;
    RETURN v_return;
  END;

  FUNCTION row_exists_yn (
    p_id IN "STA_SYSTEM_PARAMETER"."ID"%TYPE /*PK*/ )
  RETURN VARCHAR2
  IS
  BEGIN
    RETURN
      CASE
        WHEN row_exists(
          p_id => p_id )
        THEN 'Y'
        ELSE 'N'
      END;
  END;

  FUNCTION create_row (
    p_id        IN "STA_SYSTEM_PARAMETER"."ID"%TYPE DEFAULT NULL /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
    p_parameter IN "STA_SYSTEM_PARAMETER"."PARAMETER"%TYPE,
    p_value     IN "STA_SYSTEM_PARAMETER"."VALUE"%TYPE )
  RETURN "STA_SYSTEM_PARAMETER"."ID"%TYPE
  IS
    v_return "STA_SYSTEM_PARAMETER"."ID"%TYPE; 
  BEGIN
    INSERT INTO "STA_SYSTEM_PARAMETER" (
      "ID" /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
      "PARAMETER",
      "VALUE" )
    VALUES (
      p_id,
      p_parameter,
      p_value )
    RETURN 
      "ID"
    INTO
      v_return;
    RETURN v_return;
  END create_row;

  PROCEDURE create_row (
    p_id        IN "STA_SYSTEM_PARAMETER"."ID"%TYPE DEFAULT NULL /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
    p_parameter IN "STA_SYSTEM_PARAMETER"."PARAMETER"%TYPE,
    p_value     IN "STA_SYSTEM_PARAMETER"."VALUE"%TYPE )
  IS
  BEGIN
    INSERT INTO "STA_SYSTEM_PARAMETER" (
      "ID" /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
      "PARAMETER",
      "VALUE" )
    VALUES (
      p_id,
      p_parameter,
      p_value );
  END create_row;

  FUNCTION create_row (
    p_row IN "STA_SYSTEM_PARAMETER"%ROWTYPE )
  RETURN "STA_SYSTEM_PARAMETER"."ID"%TYPE
  IS
  BEGIN
    RETURN create_row (
      p_id        => p_row."ID" /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
      p_parameter => p_row."PARAMETER",
      p_value     => p_row."VALUE" );
  END create_row;

  PROCEDURE create_row (
    p_row IN "STA_SYSTEM_PARAMETER"%ROWTYPE )
  IS
  BEGIN
    create_row (
      p_id        => p_row."ID" /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
      p_parameter => p_row."PARAMETER",
      p_value     => p_row."VALUE" );
  END create_row;

  FUNCTION create_rows (
    p_rows_tab IN t_rows_tab )
  RETURN t_rows_tab
  IS
    v_return t_rows_tab;
  BEGIN
    FORALL i IN INDICES OF p_rows_tab
    INSERT INTO "STA_SYSTEM_PARAMETER" (
      "ID" /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
      "PARAMETER",
      "VALUE" )
    VALUES (
      p_rows_tab(i)."ID",
      p_rows_tab(i)."PARAMETER",
      p_rows_tab(i)."VALUE" )
    RETURN 
      "ID" /*PK*/,
      "PARAMETER",
      "VALUE"
    BULK COLLECT INTO v_return;
    RETURN v_return;
  END create_rows;

  PROCEDURE create_rows (
    p_rows_tab IN t_rows_tab )
  IS
  BEGIN
    FORALL i IN INDICES OF p_rows_tab
    INSERT INTO "STA_SYSTEM_PARAMETER" (
      "ID" /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
      "PARAMETER",
      "VALUE" )
    VALUES (
      p_rows_tab(i)."ID",
      p_rows_tab(i)."PARAMETER",
      p_rows_tab(i)."VALUE" );
  END create_rows;

  FUNCTION read_row (
    p_id IN "STA_SYSTEM_PARAMETER"."ID"%TYPE /*PK*/ )
  RETURN "STA_SYSTEM_PARAMETER"%ROWTYPE
  IS
    v_row "STA_SYSTEM_PARAMETER"%ROWTYPE;
    CURSOR cur_row IS
      SELECT * FROM "STA_SYSTEM_PARAMETER"
      WHERE
        "ID" = p_id;
  BEGIN
    OPEN cur_row;
    FETCH cur_row INTO v_row;
    CLOSE cur_row;
    RETURN v_row;
  END read_row;

  PROCEDURE read_row (
    p_id        IN            "STA_SYSTEM_PARAMETER"."ID"%TYPE /*PK*/,
    p_parameter    OUT NOCOPY "STA_SYSTEM_PARAMETER"."PARAMETER"%TYPE,
    p_value        OUT NOCOPY "STA_SYSTEM_PARAMETER"."VALUE"%TYPE )
  IS
    v_row "STA_SYSTEM_PARAMETER"%ROWTYPE;
  BEGIN
    v_row := read_row (
      p_id => p_id );
    p_parameter := v_row."PARAMETER"; 
    p_value     := v_row."VALUE"; 
  END read_row;

  FUNCTION read_rows (
    p_ref_cursor IN t_strong_ref_cursor )
  RETURN t_rows_tab
  IS
    v_return t_rows_tab;
  BEGIN
    IF (p_ref_cursor%ISOPEN) THEN
      g_bulk_completed := FALSE;
      FETCH p_ref_cursor BULK COLLECT INTO v_return LIMIT g_bulk_limit;
      IF (v_return.COUNT < g_bulk_limit) THEN
        g_bulk_completed := TRUE;
      END IF;
    END IF;
    RETURN v_return;
  END read_rows;

  FUNCTION update_row (
    p_id        IN "STA_SYSTEM_PARAMETER"."ID"%TYPE DEFAULT NULL /*PK*/,
    p_parameter IN "STA_SYSTEM_PARAMETER"."PARAMETER"%TYPE,
    p_value     IN "STA_SYSTEM_PARAMETER"."VALUE"%TYPE )
  RETURN "STA_SYSTEM_PARAMETER"."ID"%TYPE
  IS
    v_return "STA_SYSTEM_PARAMETER"."ID"%TYPE; 
  BEGIN
    UPDATE
      "STA_SYSTEM_PARAMETER"
    SET
      "PARAMETER" = p_parameter,
      "VALUE"     = p_value
    WHERE
      "ID" = p_id
    RETURN 
      "ID"
    INTO
      v_return;
    RETURN v_return;
  END update_row;

  PROCEDURE update_row (
    p_id        IN "STA_SYSTEM_PARAMETER"."ID"%TYPE DEFAULT NULL /*PK*/,
    p_parameter IN "STA_SYSTEM_PARAMETER"."PARAMETER"%TYPE,
    p_value     IN "STA_SYSTEM_PARAMETER"."VALUE"%TYPE )
  IS
  BEGIN
    UPDATE
      "STA_SYSTEM_PARAMETER"
    SET
      "PARAMETER" = p_parameter,
      "VALUE"     = p_value
    WHERE
      "ID" = p_id;
  END update_row;

  FUNCTION update_row (
    p_row IN "STA_SYSTEM_PARAMETER"%ROWTYPE )
  RETURN "STA_SYSTEM_PARAMETER"."ID"%TYPE
  IS
  BEGIN
    RETURN update_row (
      p_id        => p_row."ID" /*PK*/,
      p_parameter => p_row."PARAMETER",
      p_value     => p_row."VALUE" );
  END update_row;

  PROCEDURE update_row (
    p_row IN "STA_SYSTEM_PARAMETER"%ROWTYPE )
  IS
  BEGIN
    update_row (
      p_id        => p_row."ID" /*PK*/,
      p_parameter => p_row."PARAMETER",
      p_value     => p_row."VALUE" );
  END update_row;

  PROCEDURE update_rows (
    p_rows_tab IN t_rows_tab )
  IS
  BEGIN
    FORALL i IN INDICES OF p_rows_tab
      UPDATE
        "STA_SYSTEM_PARAMETER"
      SET
        "PARAMETER" = p_rows_tab(i)."PARAMETER",
        "VALUE"     = p_rows_tab(i)."VALUE"
      WHERE
        "ID" = p_rows_tab(i)."ID";
  END update_rows;

  FUNCTION create_or_update_row (
    p_id        IN "STA_SYSTEM_PARAMETER"."ID"%TYPE DEFAULT NULL /*PK*/,
    p_parameter IN "STA_SYSTEM_PARAMETER"."PARAMETER"%TYPE,
    p_value     IN "STA_SYSTEM_PARAMETER"."VALUE"%TYPE )
  RETURN "STA_SYSTEM_PARAMETER"."ID"%TYPE
  IS
  BEGIN
    IF row_exists(
      p_id => p_id
    )
    THEN
      RETURN update_row (
        p_id        => p_id /*PK*/,
        p_parameter => p_parameter,
        p_value     => p_value );
    ELSE
      RETURN create_row (
        p_id        => p_id /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
        p_parameter => p_parameter,
        p_value     => p_value );
    END IF;
  END create_or_update_row;

  PROCEDURE create_or_update_row (
    p_id        IN "STA_SYSTEM_PARAMETER"."ID"%TYPE DEFAULT NULL /*PK*/,
    p_parameter IN "STA_SYSTEM_PARAMETER"."PARAMETER"%TYPE,
    p_value     IN "STA_SYSTEM_PARAMETER"."VALUE"%TYPE )
  IS
  BEGIN
    IF row_exists(
      p_id => p_id
    )
    THEN
      update_row (
        p_id        => p_id /*PK*/,
        p_parameter => p_parameter,
        p_value     => p_value );
    ELSE
      create_row (
        p_id        => p_id /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
        p_parameter => p_parameter,
        p_value     => p_value );
    END IF;
  END create_or_update_row;

  FUNCTION create_or_update_row (
    p_row IN "STA_SYSTEM_PARAMETER"%ROWTYPE )
  RETURN "STA_SYSTEM_PARAMETER"."ID"%TYPE
  IS
  BEGIN
    IF row_exists(
      p_id => p_row."ID"
    )
    THEN
      RETURN update_row (
        p_id        => p_row."ID" /*PK*/,
        p_parameter => p_row."PARAMETER",
        p_value     => p_row."VALUE" );
    ELSE
      RETURN create_row (
        p_id        => p_row."ID" /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
        p_parameter => p_row."PARAMETER",
        p_value     => p_row."VALUE" );
    END IF;
  END create_or_update_row;

  PROCEDURE create_or_update_row (
    p_row IN "STA_SYSTEM_PARAMETER"%ROWTYPE )
  IS
  BEGIN
    IF row_exists(
      p_id => p_row."ID"
    )
    THEN
      update_row (
        p_id        => p_row."ID" /*PK*/,
        p_parameter => p_row."PARAMETER",
        p_value     => p_row."VALUE" );
    ELSE
      create_row (
        p_id        => p_row."ID" /*PK*/ /*GENERATED BY DEFAULT ON NULL AS IDENTITY*/,
        p_parameter => p_row."PARAMETER",
        p_value     => p_row."VALUE" );
    END IF;
  END create_or_update_row;

  FUNCTION get_parameter (
    p_id IN "STA_SYSTEM_PARAMETER"."ID"%TYPE /*PK*/ )
  RETURN "STA_SYSTEM_PARAMETER"."PARAMETER"%TYPE
  IS
  BEGIN
    RETURN read_row (
      p_id => p_id )."PARAMETER";
  END get_parameter;

  FUNCTION get_value (
    p_id IN "STA_SYSTEM_PARAMETER"."ID"%TYPE /*PK*/ )
  RETURN "STA_SYSTEM_PARAMETER"."VALUE"%TYPE
  IS
  BEGIN
    RETURN read_row (
      p_id => p_id )."VALUE";
  END get_value;

  PROCEDURE set_parameter (
    p_id        IN "STA_SYSTEM_PARAMETER"."ID"%TYPE /*PK*/,
    p_parameter IN "STA_SYSTEM_PARAMETER"."PARAMETER"%TYPE )
  IS
  BEGIN
    UPDATE
      "STA_SYSTEM_PARAMETER"
    SET
      "PARAMETER" = p_parameter
    WHERE
      "ID" = p_id;
  END set_parameter;

  PROCEDURE set_value (
    p_id    IN "STA_SYSTEM_PARAMETER"."ID"%TYPE /*PK*/,
    p_value IN "STA_SYSTEM_PARAMETER"."VALUE"%TYPE )
  IS
  BEGIN
    UPDATE
      "STA_SYSTEM_PARAMETER"
    SET
      "VALUE" = p_value
    WHERE
      "ID" = p_id;
  END set_value;

END "STA_SYSTEM_PARAMETER_API";
/]]></n0:source>
		</n0:createOraclePackageBody>
	</changeSet>
</databaseChangeLog>
